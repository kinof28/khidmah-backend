generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Admin {
    id       Int    @id @default(autoincrement())
    name     String
    email    String @unique
    password String
}

model Service {
    id        Int        @id @default(autoincrement())
    title_ar  String
    title_en  String
    isActive  Boolean    @default(true)
    isRide    Boolean    @default(false)
    // types     ServiceType[]
    image     String?    @default("")
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    providers Provider[]
    bookings  Booking[]

    ProviderRequest ProviderRequest[]
}

// model ServiceType {
//     id        Int       @id @default(autoincrement())
//     title_ar  String
//     title_en  String
//     price     Int
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     service   Service   @relation(fields: [serviceId], references: [id])
//     serviceId Int
//     bookings  Booking[]
// }

model Provider {
    id          Int       @id @default(autoincrement())
    name        String
    email       String    @unique
    phone       String    @unique
    password    String
    longitude   String    @default("")
    latitude    String    @default("")
    image       String    @default("")
    idImage     Bytes?
    description String?
    services    Service[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    isVerified  Boolean   @default(false)
    isActive    Boolean   @default(false)
    isBlocked   Boolean   @default(false)
    isDeleted   Boolean   @default(false)
    bookings    Booking[]

    ProviderRequest ProviderRequest[]
}

model Customer {
    id         Int       @id @default(autoincrement())
    name       String
    email      String    @unique
    phone      String    @unique
    password   String
    longitude  String    @default("")
    latitude   String    @default("")
    image      String    @default("")
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    isVerified Boolean   @default(false)
    isBlocked  Boolean   @default(false)
    isDeleted  Boolean   @default(false)
    bookings   Booking[]
}

model Booking {
    id             Int      @id @default(autoincrement())
    customer       Customer @relation(fields: [customerId], references: [id])
    customerId     Int
    provider       Provider @relation(fields: [providerId], references: [id])
    providerId     Int
    service        Service  @relation(fields: [serviceId], references: [id])
    serviceId      Int
    // serviceType    ServiceType @relation(fields: [serviceTypeId], references: [id])
    // serviceTypeId  Int
    rating         Int?
    comment        String?
    price          Int
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    isConfirmed    Boolean  @default(false)
    isCancelled    Boolean  @default(false)
    isCompleted    Boolean  @default(false)
    isCustomerPaid Boolean  @default(false)
    isProviderPaid Boolean  @default(false)
    from_longitude String   @default("")
    from_latitude  String   @default("")
    to_longitude   String   @default("")
    to_latitude    String   @default("")
    at_longitude   String   @default("")
    at_latitude    String   @default("")
}

model ContactRequest {
    id        Int      @id @default(autoincrement())
    email     String
    subject   String
    body      String
    replied   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProviderRequest {
    id         Int      @id @default(autoincrement())
    service    Service  @relation(fields: [serviceId], references: [id])
    serviceId  Int
    provider   Provider @relation(fields: [providerId], references: [id])
    providerId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}
